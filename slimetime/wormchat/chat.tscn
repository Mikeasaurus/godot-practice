[gd_scene load_steps=9 format=3 uid="uid://1fdldwucvxju"]

[ext_resource type="PackedScene" uid="uid://csjewo2nqeufg" path="res://wormchat/title.tscn" id="2_kniyt"]
[ext_resource type="FontFile" uid="uid://drlm1tywrqgeh" path="res://fonts/roundedmplus1c/RoundedMplus1c-Medium.ttf" id="2_kwj07"]
[ext_resource type="Texture2D" uid="uid://dnwslu4hiovni" path="res://wormchat/to-bottom-button-bg.png" id="2_yr72g"]
[ext_resource type="Texture2D" uid="uid://b1oo5b0yq33pw" path="res://wormchat/to-bottom-button-arrow.png" id="3_jsmi6"]
[ext_resource type="Texture2D" uid="uid://ddxpyu1c5piy8" path="res://wormchat/to-bottom-button-notify.png" id="4_37x1g"]
[ext_resource type="Texture2D" uid="uid://b4y1a6pmlxeht" path="res://wormchat/close-button-bg.png" id="6_ygs5f"]
[ext_resource type="Texture2D" uid="uid://bglmtqsmv3q1x" path="res://wormchat/close-button-X.png" id="7_43f7p"]

[sub_resource type="GDScript" id="GDScript_y20m8"]
script/source = "extends Control

@onready var dialogue := $MarginContainer/ScrollContainer/CenterContainer/VBoxContainer
var peer_message_scene := preload(\"res://wormchat/peer_messages.tscn\")
var own_message_scene := preload(\"res://wormchat/own_message.tscn\")

## Notification for when new messages are in chat.
signal new_message_notifier
## Indicates that all new messages have been read.
signal all_messages_read

# A switch to call to_bottom on the next frame of processing.
# Can't change the scroll position from the RPC call where we receive the
# message(s); it immediately forgets the scroll value we set there.
# So, instead ask _process to do it for us on the next cycle.
var do_scroll_to_bottom: bool = false

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	var s: VScrollBar = $MarginContainer/ScrollContainer.get_v_scroll_bar()
	multiplayer.peer_connected.connect(_register)
	multiplayer.peer_disconnected.connect(_unregister)
	s.value_changed.connect(_on_scrolled)
	s.changed.connect(_on_content_added)
# Handle scroll actions requested from outside of normal processing mode.
func _process(_delta: float) -> void:
	if do_scroll_to_bottom:
		to_bottom()
		do_scroll_to_bottom = false

###############################################################################
# Server-side processing.
###############################################################################

# Keep track of how much history has been sent to each peer.
var peer_chat_index: Dictionary = {}

# Remember who the last peer message was from, in case we're continuing
# with more messages from that peer.
var current_peer_messages: PeerMessages = null

# Chat history
var chat := []

# Initialize client bookkeeping when they join.
func _register(id) -> void:
	if multiplayer.get_unique_id() != 1: return
	# Peer hasn't received any messages yet, so start at the beginning.
	peer_chat_index[id] = 0
	# Now that there's at least one peer listening for messages, start the synchronizer.
	if $ChatSyncTimer.is_stopped():
		$ChatSyncTimer.start()

func _unregister(id) -> void:
	if multiplayer.get_unique_id() != 1: return
	peer_chat_index.erase(id)

# Server-side function to send the chat history to a peer.
func _on_chat_sync_timer_timeout() -> void:
	var n: int = len(chat)
	for id in peer_chat_index.keys():
		var start: int = peer_chat_index[id]
		if start < n:
			_new_messages.rpc_id(id,chat.slice(start))
			peer_chat_index[id] = n

# Receive a new message from a client, to be distributed.
@rpc(\"call_local\",\"any_peer\",\"reliable\")
func _send_msg (msg: Array) -> void:
	chat.append(msg)
	return


###############################################################################
# Client-side processing.
###############################################################################

# Receive new messages from the server.
@rpc(\"reliable\")
func _new_messages (msgs) -> void:
	for msg in msgs:
		var sender: String = msg[0]
		var text: String = msg[1]
		# Message from this own peer.
		if sender == Globals.handle:
			# Done the last peer messages.
			current_peer_messages = null
			var my_message: OwnMessage = own_message_scene.instantiate()
			my_message.text = text
			dialogue.add_child(my_message)
		# Message from a peer.
		else:
			# Starting a new set of messages?
			if current_peer_messages == null or sender != current_peer_messages.peer_name:
				current_peer_messages = peer_message_scene.instantiate()
				current_peer_messages.peer_name = sender
				dialogue.add_child(current_peer_messages)
			current_peer_messages.add_message(text)
	# Send new message notification, if it wasn't immediately displayed.
	if not visible: new_message_notifier.emit()
	if not at_bottom():
		new_message_notifier.emit()
	# If at bottom, then keep scrolling to bottom.
	if at_bottom():
		do_scroll_to_bottom = true

# Send a message to the chat.
func send_msg (text: String) -> void:
	_send_msg.rpc_id(1,[Globals.handle,text])

# Check if scrolled to bottom of messages.
func at_bottom () -> bool:
	var scroll: ScrollContainer = $MarginContainer/ScrollContainer
	return scroll.scroll_vertical >= scroll.get_v_scroll_bar().max_value - scroll.size.y
# Scroll to bottom of messages.
func to_bottom () -> void:
	var scroll: ScrollContainer = $MarginContainer/ScrollContainer
	# Need to wait until next frame, in case new content was just added to ScrollContainer.
	await get_tree().process_frame
	scroll.scroll_vertical = scroll.get_v_scroll_bar().max_value
	# Update state of the scroll button (it should turn itself off at this point.)
	_update_scroll_button()

# Called when the local user adds a new chat message.
func _on_text_edit_text_submitted(new_text: String) -> void:
	send_msg(new_text)
	# Clear the text entry box.
	$TextEdit.clear()

# Modify appearance of bottom button based on scroll position
func _update_scroll_button () -> void:
	# If already scrolled to the bottom, then hide the button.
	# Also reset any notification about new messages.
	if at_bottom():
		$ToBottom.hide()
		$ToBottom/Notifier.hide()
		# If the user is seeing the bottom messages, clear the notification signal.
		if visible: all_messages_read.emit()
	# Otherwise, show the button.
	else:
		$ToBottom.show()
func _on_scrolled (_value: float) -> void:
	_update_scroll_button()
func _on_visibility_changed() -> void:
	if visible: to_bottom()

# Update appearance of bottom button when new content is available.
func _on_content_added () -> void:
	# If not at bottom of scrolling window, then turn on notification icon.
	if not at_bottom():
		$ToBottom/Notifier.show()

# Highlight bottom button when it's hovered.
func _on_to_bottom_mouse_entered() -> void:
	$ToBottom/Arrow.modulate = Color.WHITE
func _on_to_bottom_mouse_exited() -> void:
	$ToBottom/Arrow.modulate = Color.hex(0x777777ff)

# Scroll to bottom when the button is clicked.
func _on_to_bottom_gui_input(event: InputEvent) -> void:
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
			to_bottom()

# Logic for \"close\" button.
func _on_close_mouse_entered() -> void:
	$Close/X.modulate = Color.WHITE
func _on_close_mouse_exited() -> void:
	$Close/X.modulate = Color.hex(0x777777ff)
func _on_close_gui_input(event: InputEvent) -> void:
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
			MenuHandler.deactivate_menu()
"

[node name="Chat" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_y20m8")

[node name="ColorRect" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
color = Color(0, 0, 0, 0.768627)

[node name="Title" parent="." instance=ExtResource("2_kniyt")]
layout_mode = 1
anchors_preset = -1
anchor_left = 0.5
anchor_right = 0.5
offset_left = -127.0
offset_top = 50.0
offset_right = 127.0
offset_bottom = 56.0
grow_horizontal = 2

[node name="MarginContainer" type="MarginContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_top = 150
theme_override_constants/margin_bottom = 200

[node name="ScrollContainer" type="ScrollContainer" parent="MarginContainer"]
layout_mode = 2
size_flags_horizontal = 4
horizontal_scroll_mode = 0
vertical_scroll_mode = 3

[node name="CenterContainer" type="CenterContainer" parent="MarginContainer/ScrollContainer"]
layout_mode = 2
size_flags_vertical = 0

[node name="VBoxContainer" type="VBoxContainer" parent="MarginContainer/ScrollContainer/CenterContainer"]
layout_mode = 2

[node name="TextEdit" type="LineEdit" parent="."]
layout_mode = 1
anchors_preset = -1
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -274.0
offset_top = -143.0
offset_right = 275.0
offset_bottom = -74.0
grow_horizontal = 2
grow_vertical = 0
theme_override_fonts/font = ExtResource("2_kwj07")
theme_override_font_sizes/font_size = 30
max_length = 255

[node name="ToBottom" type="TextureRect" parent="."]
visible = false
layout_mode = 0
offset_left = 1339.0
offset_top = 805.0
offset_right = 1439.0
offset_bottom = 905.0
tooltip_text = "Scroll to latest message."
texture = ExtResource("2_yr72g")
metadata/_edit_group_ = true

[node name="Arrow" type="TextureRect" parent="ToBottom"]
modulate = Color(0.466667, 0.466667, 0.466667, 1)
layout_mode = 0
texture = ExtResource("3_jsmi6")

[node name="Notifier" type="TextureRect" parent="ToBottom"]
visible = false
layout_mode = 0
texture = ExtResource("4_37x1g")

[node name="Close" type="TextureRect" parent="."]
layout_mode = 0
offset_left = 1339.0
offset_top = 30.0
offset_right = 1439.0
offset_bottom = 130.0
tooltip_text = "Close the chat window."
texture = ExtResource("6_ygs5f")

[node name="X" type="TextureRect" parent="Close"]
modulate = Color(0.466667, 0.466667, 0.466667, 1)
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0
texture = ExtResource("7_43f7p")

[node name="ChatSyncTimer" type="Timer" parent="."]
wait_time = 0.5

[connection signal="visibility_changed" from="." to="." method="_on_visibility_changed"]
[connection signal="text_submitted" from="TextEdit" to="." method="_on_text_edit_text_submitted"]
[connection signal="gui_input" from="ToBottom" to="." method="_on_to_bottom_gui_input"]
[connection signal="mouse_entered" from="ToBottom" to="." method="_on_to_bottom_mouse_entered"]
[connection signal="mouse_exited" from="ToBottom" to="." method="_on_to_bottom_mouse_exited"]
[connection signal="gui_input" from="Close" to="." method="_on_close_gui_input"]
[connection signal="mouse_entered" from="Close" to="." method="_on_close_mouse_entered"]
[connection signal="mouse_exited" from="Close" to="." method="_on_close_mouse_exited"]
[connection signal="timeout" from="ChatSyncTimer" to="." method="_on_chat_sync_timer_timeout"]
